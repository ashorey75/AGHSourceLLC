{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport UsersList from \"../components/UsersList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nconst Users = () => {\n  _s();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n  useEffect(() => {\n    //useEffect does not love the idea of a promise so it makes more sense to\n    //create a function inside that can use async\n    const fetchUsers = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/products`); // fetch by default will use a get request and we dont need any headers since we arent sending data\n\n        setLoadedUsers(responseData.products);\n      } catch (err) {}\n    };\n    fetchUsers();\n  }, [sendRequest]);\n  return {/*\r\n          <React.Fragment>\r\n           <ErrorModal error={error} onClear={clearError} />\r\n           {isLoading && (\r\n             <div className=\"center\">\r\n               <LoadingSpinner asOverlay />\r\n             </div>\r\n           )}\r\n           {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\r\n          </React.Fragment>\r\n          */};\n};\n_s(Users, \"LgV4OV3svx+SdyvxL/9ZeC9O1LI=\", false, function () {\n  return [useHttpClient];\n});\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useEffect","useState","UsersList","ErrorModal","LoadingSpinner","useHttpClient","Users","_s","isLoading","error","sendRequest","clearError","loadedUsers","setLoadedUsers","fetchUsers","responseData","process","env","REACT_APP_BACKEND_URL","products","err","_c","$RefreshReg$"],"sources":["C:/Users/ashor/AGHSource/agh_frontend/src/user/pages/Products.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport UsersList from \"../components/UsersList\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst Users = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedUsers, setLoadedUsers] = useState();\r\n\r\n  useEffect(() => {\r\n    //useEffect does not love the idea of a promise so it makes more sense to\r\n    //create a function inside that can use async\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/products`\r\n        ); // fetch by default will use a get request and we dont need any headers since we arent sending data\r\n\r\n        setLoadedUsers(responseData.products);\r\n      } catch (err) {}\r\n    };\r\n    fetchUsers();\r\n  }, [sendRequest]);\r\n\r\n  return (\r\n    {/*\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner asOverlay />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\r\n    </React.Fragment>\r\n    */}\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,+CAA+C;AACtE,OAAOC,cAAc,MAAM,mDAAmD;AAC9E,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGN,aAAa,CAAC,CAAC;EACrE,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,YAAY,GAAG,MAAML,WAAW,CACpC,GAAGM,OAAO,CAACC,GAAG,CAACC,qBAAqB,WACtC,CAAC,CAAC,CAAC;;QAEHL,cAAc,CAACE,YAAY,CAACI,QAAQ,CAAC;MACvC,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;IACjB,CAAC;IACDN,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,OACE,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAVK,CAUE;AAEP,CAAC;AAACH,EAAA,CAhCID,KAAK;EAAA,QAC6CD,aAAa;AAAA;AAAAgB,EAAA,GAD/Df,KAAK;AAkCX,eAAeA,KAAK;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}